// Generated by CoffeeScript 1.7.1
var getOffset, ikagaka;

getOffset = function( elem, doc, docElem ) {
	var computedStyle,
		offsetParent = elem.offsetParent,
		prevOffsetParent = elem,
		body = doc.body,
		defaultView = doc.defaultView,
		prevComputedStyle = defaultView ? defaultView.getComputedStyle( elem, null ) : elem.currentStyle,
		top = elem.offsetTop,
		left = elem.offsetLeft;

	while ( (elem = elem.parentNode) && elem !== body && elem !== docElem ) {
		if ( jQuery.support.fixedPosition && prevComputedStyle.position === "fixed" ) {
			break;
		}

		computedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle;
		top  -= elem.scrollTop;
		left -= elem.scrollLeft;

		if ( elem === offsetParent ) {
			top  += elem.offsetTop;
			left += elem.offsetLeft;

			if ( jQuery.support.doesNotAddBorder && !(jQuery.support.doesAddBorderForTableAndCells && rtable.test(elem.nodeName)) ) {
				top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
				left += parseFloat( computedStyle.borderLeftWidth ) || 0;
			}

			prevOffsetParent = offsetParent;
			offsetParent = elem.offsetParent;
		}

		if ( jQuery.support.subtractsBorderForOverflowNotVisible && computedStyle.overflow !== "visible" ) {
			top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
			left += parseFloat( computedStyle.borderLeftWidth ) || 0;
		}

		prevComputedStyle = computedStyle;
	}

	if ( prevComputedStyle.position === "relative" || prevComputedStyle.position === "static" ) {
		top  += body.offsetTop;
		left += body.offsetLeft;
	}

	if ( jQuery.support.fixedPosition && prevComputedStyle.position === "fixed" ) {
		top  += Math.max( docElem.scrollTop, body.scrollTop );
		left += Math.max( docElem.scrollLeft, body.scrollLeft );
	}

	return { top: top, left: left };
};;

if (typeof localStorage !== "undefined" && localStorage !== null) {
  localStorage.clear();
}

ikagaka = (function() {
  var canvedElements, composeElements, copyCnv, drawCnv, isArray, isCanvas, isFunction, isHit, isImage, isNumber, isObject, isUndefined, loadImg, loadImgsToCnvs, overlayCnv, overlayfastCnv, setCollisions, transImg, typeIs;
  typeIs = function(unknown) {
    return Object.prototype.toString.apply(unknown);
  };
  isUndefined = function(undf) {
    return typeof undf === "undefined";
  };
  isFunction = function(fn) {
    return Object.prototype.toString.apply(fn) === "[object Function]";
  };
  isArray = function(ary) {
    return Object.prototype.toString.apply(ary) === "[object Array]";
  };
  isObject = function(obj) {
    return Object.prototype.toString.apply(obj) === "[object Object]";
  };
  isImage = function(img) {
    return Object.prototype.toString.apply(img) === "[object HTMLImageElement]";
  };
  isCanvas = function(cnv) {
    return Object.prototype.toString.apply(cnv) === "[object HTMLCanvasElement]";
  };
  isNumber = function(num) {
    return isFinite(Number(num));
  };
  test("isNumber", function() {
    ok(isNumber(0));
    ok(isNumber("-5"));
    return ok(isNumber("0x0012"));
  });
  loadImg = function(url, callback) {
    var img;
    if (callback == null) {
      callback = function(img) {};
    }
    if (url === "") {
      callback(new Image);
    } else {
      img = new Image;
      img.src = url;
      img.onload = function() {
        return callback(img);
      };
      img.onerror = function() {
        return callback(new Image);
      };
    }
  };
  asyncTest("loadImg", function() {
    return ok(isUndefined(loadImg("./ku-/shell/master/surface0.png", function(img) {
      start();
      ok(isImage(img));
      ok(img.width > 0);
      return loadImg("", function(img) {
        start();
        ok(isImage(img));
        return ok(img.width === 0);
      });
    })));
  });
  copyCnv = function(cnv) {
    var copy, ctx;
    copy = document.createElement("canvas");
    copy.width = cnv.width;
    copy.height = cnv.height;
    ctx = copy.getContext('2d');
    try {
      ctx.drawImage(cnv, 0, 0);
    } catch (_error) {}
    return copy;
  };
  asyncTest("copyCnv", function() {
    return loadImg("./ku-/shell/master/surface0.png", function(img) {
      start();
      return ok(isCanvas(copyCnv(img)));
    });
  });
  overlayCnv = function(target, cnv, x, y) {
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    return overlayfastCnv(target, cnv, x, y);
  };
  overlayfastCnv = function(target, cnv, x, y) {
    var ctx;
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    ctx = target.getContext('2d');
    try {
      ctx.drawImage(cnv, x, y);
    } catch (_error) {}
    return target;
  };
  asyncTest("overlayCnv", function() {
    return loadImgsToCnvs(["./ku-/shell/master/surface0.png", "./ku-/shell/master/surface8.png", "./hoge"], function(cnvAry) {
      start();
      return ok(isCanvas(overlayCnv(cnvAry[0], cnvAry[1], 100, 100)));
    });
  });
  drawCnv = function(target, cnv) {
    var ctx;
    target.width = cnv.width;
    target.height = cnv.height;
    if (target.parentNode != null) {
      target.parentNode.style.width = cnv.width;
      target.parentNode.style.height = cnv.height;
    }
    ctx = target.getContext('2d');
    try {
      ctx.drawImage(cnv, 0, 0);
    } catch (_error) {}
    return target;
  };
  asyncTest("drawCnv", function() {
    return loadImg("./ku-/shell/master/surface0.png", function(img) {
      var cnv, div;
      start();
      div = document.createElement("div");
      cnv = document.createElement("canvas");
      div.appendChild(cnv);
      ok(isCanvas(drawCnv(cnv, copyCnv(img))));
      return ok((div.style.width != null) && parseInt(div.style.width, 10) > 0);
    });
  });
  transImg = function(img, callback) {
    var b, cnv, ctx, e, g, i, imgdata, r, _ref;
    if (callback == null) {
      callback = function(cnv) {};
    }
    cnv = copyCnv(img);
    ctx = cnv.getContext('2d');
    try {
      imgdata = ctx.getImageData(0, 0, img.width, img.height);
      if (imgdata.data[3] === 0) {
        setTimeout(function() {
          ctx.putImageData(imgdata, 0, 0);
          return callback(cnv);
        });
      } else {
        i = 0;
        _ref = [imgdata.data[0], imgdata.data[1], imgdata.data[2]], r = _ref[0], g = _ref[1], b = _ref[2];
        while (i < imgdata.data.length) {
          if (r === imgdata.data[i] && g === imgdata.data[i + 1] && b === imgdata.data[i + 2]) {
            imgdata.data[i + 3] = 0;
          }
          i += 4;
        }
        setTimeout(function() {
          ctx.putImageData(imgdata, 0, 0);
          return callback(cnv);
        });
      }
    } catch (_error) {
      e = _error;
      setTimeout(function() {
        return callback(cnv);
      });
    }
  };
  asyncTest("transImg", function() {
    return loadImg("./ku-/shell/master/surface0.png", function(img) {
      start();
      ok(isUndefined(transImg(img, function(cnv) {
        start();
        return ok(isCanvas(cnv));
      })));
      return stop();
    });
  });
  loadImgsToCnvs = (function() {
    var cnvCache;
    cnvCache = {};
    return function(urlAry, callback) {
      var i, ifend;
      if (callback == null) {
        callback = function(cnvAry) {};
      }
      i = urlAry.length;
      ifend = function(url) {
        var cnvAry;
        if (--i === 0) {
          cnvAry = urlAry.map(function(url) {
            return copyCnv(cnvCache[url]);
          });
          return callback(cnvAry);
        }
      };
      urlAry.forEach(function(url) {
        var dataScheme;
        if (cnvCache[url] != null) {
          return setTimeout(function() {
            return ifend(url);
          });
        } else {
          if ((typeof localStorage !== "undefined" && localStorage !== null ? localStorage[url] : void 0) != null) {
            dataScheme = localStorage[url];
          }
          return loadImg(dataScheme || url, function(img) {
            return transImg(img, function(cnv) {
              cnvCache[url] = cnv;
              if (typeof localStorage !== "undefined" && localStorage !== null) {
                localStorage[url] = cnv.toDataURL("image/png");
              }
              return setTimeout(function() {
                return ifend(url);
              });
            });
          });
        }
      });
    };
  })();
  asyncTest("loadImgsToCnvs", 11, function() {
    return ok(isUndefined(loadImgsToCnvs(["./ku-/shell/master/surface0.png", "./ku-/shell/master/surface5.png", "", "./undefined"], function(cnvAry) {
      start();
      ok(cnvAry.length === 4);
      ok(isCanvas(cnvAry[0]) && cnvAry[0].width > 0);
      ok(isCanvas(cnvAry[1]) && cnvAry[1].width > 0);
      ok(isCanvas(cnvAry[2]) && cnvAry[2].width === 0);
      ok(isCanvas(cnvAry[3]) && cnvAry[3].width === 0);
      return loadImgsToCnvs(["./ku-/shell/master/surface0.png", "./ku-/shell/master/surface5.png", "", "./undefined"], function(cnvAry) {
        start();
        ok(cnvAry.length === 4);
        ok(isCanvas(cnvAry[0]) && cnvAry[0].width > 0);
        ok(isCanvas(cnvAry[1]) && cnvAry[1].width > 0);
        ok(isCanvas(cnvAry[2]) && cnvAry[2].width === 0);
        return ok(isCanvas(cnvAry[3]) && cnvAry[3].width === 0);
      });
    })));
  });
  canvedElements = function(elmAry, callback) {
    var urlAry;
    if (callback == null) {
      callback = function(cnvedElmAry) {};
    }
    urlAry = elmAry.map(function(_arg) {
      var type, url, x, y, _ref;
      _ref = _arg != null ? _arg : ary, type = _ref[0], url = _ref[1], x = _ref[2], y = _ref[3];
      return url;
    });
    loadImgsToCnvs(urlAry, function(cnvAry) {
      var cnvedElmAry;
      cnvedElmAry = elmAry.map(function(_arg, i) {
        var type, url, x, y, _ref;
        _ref = _arg != null ? _arg : ary, type = _ref[0], url = _ref[1], x = _ref[2], y = _ref[3];
        return [type, cnvAry[i], x, y];
      });
      return callback(cnvedElmAry);
    });
  };
  asyncTest("canvedElements", function() {
    var elmAry;
    elmAry = [["base", "./ku-/shell/master/surface0.png"], ["overlay", "./ku-/shell/master/surface1.png", -100, 100]];
    return ok(isUndefined(canvedElements(elmAry, function(cnvedElmAry) {
      start();
      return cnvedElmAry.forEach(function(_arg, i) {
        var cnv, type, x, y, _ref;
        _ref = _arg != null ? _arg : ary, type = _ref[0], cnv = _ref[1], x = _ref[2], y = _ref[3];
        ok(type === elmAry[i][0]);
        return ok(isCanvas(cnv));
      });
    })));
  });
  composeElements = function(elmAry, callback) {
    if (callback == null) {
      callback = function(cnv) {};
    }
    return canvedElements(elmAry, function(cnvedElmAry) {
      var target;
      target = copyCnv(cnvedElmAry[0][1]);
      cnvedElmAry.forEach(function(_arg) {
        var cnv, type, x, y, _ref;
        _ref = _arg != null ? _arg : ary, type = _ref[0], cnv = _ref[1], x = _ref[2], y = _ref[3];
        switch (type) {
          case "base":
            return target = copyCnv(cnv);
          case "overlay":
            return target = overlayCnv(target, cnv, x, y);
          case "overlayfast":
            return target = overlayfast(target, cnv, x, y);
        }
      });
      return callback(target);
    });
  };
  asyncTest("composeElements", function() {
    var elmAry;
    elmAry = [["base", "./ku-/shell/master/surface0.png"], ["overlay", "./ku-/shell/master/surface1.png", 100, 100], ["overlay", "./ku-/shell/master/surface2.png", -100, 100], ["overlay", "./ku-/shell/master/surface3.png", 100, -100], ["overlay", "./ku-/shell/master/surface4.png", -100, -100]];
    return composeElements(elmAry, function(cnv) {
      start();
      return ok(isCanvas(cnv));
    });
  });
  isHit = function(target, x, y) {
    var ctx, imgdata;
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    ctx = target.getContext("2d");
    try {
      imgdata = ctx.getImageData(0, 0, x, y);
      return imgdata.data[imgdata.data.length - 1] !== 0;
    } catch (_error) {}
    return true;
  };
  asyncTest("isHit", function() {
    var elmAry;
    elmAry = [["base", "./ku-/shell/master/surface0.png"]];
    return composeElements(elmAry, function(cnv) {
      start();
      return ok(!isHit(cnv, 1, 1));
    });
  });
  setCollisions = function(target, colAry, handler) {
    var mouseEvent;
    if (handler == null) {
      handler = function(e) {};
    }
    mouseEvent = function(id, e, colAry, handler) {
      var event, isOnMouse, left, offsetX, offsetY, scopeId, top, _ref;
      scopeId = /[0-9]+/.exec(this.parentNode.getAttribute("id")[0]);
      if (!isNumber(scopeId)) {
        scopeId = "";
      }
      _ref = getOffset(this, this.ownerDocument, this.ownerDocument.documentElement), left = _ref.left, top = _ref.top;
      offsetX = e.offsetX || e.pageY - top;
      offsetY = e.offsetY || e.pageX - left;
      if (isHit(target, offsetX, offsetY)) {
        e.preventDefault();
        event = {
          "ID": id,
          "Reference0": offsetX,
          "Reference1": offsetY,
          "Reference2": 0,
          "Reference3": scopeId,
          "Reference4": "",
          "Reference5": 0
        };
        if (id === "OnMouseMove") {
          delete event.Reference5;
        }
        isOnMouse = false;
        if (colAry != null) {
          colAry.forEach(function(_arg) {
            var name, x, y, _ref1, _x, _y;
            _ref1 = _arg != null ? _arg : ary, x = _ref1[0], y = _ref1[1], _x = _ref1[2], _y = _ref1[3], name = _ref1[4];
            if (((x < offsetX && offsetX < _x) && (y < offsetY && offsetY < _y)) || ((_x < offsetX && offsetX < x) && (_y < offsetY && offsetY < y))) {
              isOnMouse = true;
              return event.Reference4 = name;
            }
          });
        }
        if (isOnMouse) {
          target.style.cursor = "pointer";
        } else {
          target.style.cursor = "default";
        }
        return handler(event);
      }
    };
    [
      [
        "click", function(e) {
          return mouseEvent.call(this, "OnMouseClick", e, colAry, handler);
        }
      ], [
        "dblclick", function(e) {
          return mouseEvent.call(this, "OnDoubleMouseClick", e, colAry, handler);
        }
      ], [
        "mousedown", function(e) {
          return mouseEvent.call(this, "OnMouseDown", e, colAry, handler);
        }
      ], [
        "mousemove", function(e) {
          return mouseEvent.call(this, "OnMouseMove", e, colAry, handler);
        }
      ], [
        "mouseup", function(e) {
          return mouseEvent.call(this, "OnMouseUp", e, colAry, handler);
        }
      ], [
        "touchstart", (function() {
          var touchOnce;
          touchOnce = false;
          return function(e) {
            if (!touchOnce) {
              touchOnce = true;
            } else {
              touchOnce = false;
              mouseEvent.call(this, "OnDoubleMouseClick", e, colAry, handler);
            }
            return setTimeout((function() {
              return touchOnce = false;
            }), 500);
          };
        })()
      ], [
        "touchmove", function(e) {
          return mouseEvent.call(this, "OnMouseMove", e, colAry, handler);
        }
      ], [
        "touchend", function(e) {
          return mouseEvent.call(this, "OnMouseUp", e, colAry, handler);
        }
      ], ["touchcancel", function(e) {}]
    ].forEach(function(_arg) {
      var handler, type, _ref;
      _ref = _arg != null ? _arg : ary, type = _ref[0], handler = _ref[1];
      target.removeEventListener(type, handler.bind(target));
      return target.addEventListener(type, handler.bind(target));
    });
    return target;
  };
  return asyncTest("setCollisions", function() {
    var colAry, elmAry;
    elmAry = [["base", "./ku-/shell/master/surface0.png"]];
    colAry = [[71, 40, 168, 98, "head"], [97, 112, 164, 158, "face"], [122, 216, 150, 259, "bust"]];
    return composeElements(elmAry, function(cnv) {
      var scope, target;
      start();
      ok(true);
      scope = document.createElement("div");
      scope.setAttribute("id", "scope0");
      target = document.createElement("canvas");
      scope.appendChild(target);
      setCollisions(drawCnv(target, cnv), colAry, function(e) {
        var key, val, _results;
        _results = [];
        for (key in e) {
          val = e[key];
          _results.push(console.log(key, val));
        }
        return _results;
      });
      $("body").append("hpge");
      return $("body").append(scope);
    });
  });

  /*
  	
  	_namedAry = []
  	
  	_makeNamed = ( opt )->	# namedObj
  		
  		_makeScope = ( n )->	# scopeObj
  			
  			_makeSurface = ( n )->
  				
  				return {
  					"playAnimation":( n, callback=(surfaceObj)-> )->	# surfaceObj
  						return @
  					"stopAnimation":( n )->					# surfaceObj
  						return @
  					"show":			->						# surfaceObj
  						return @
  					"hide":			->						# surfaceObj
  						return @
  					"disappear":	->						# void
  						return undefined
  				}
  			
  			_makeBlimp = ( n )->
  				
  				return {
  					"show":		->						# blimpObj
  						return @
  					"hide":		->						# blimpObj
  						return @
  					"talk":		( chr="" )->			# blimpObj
  						return @
  					"selection":( title="", id="" )->	# blimpObj
  						return @
  					"anchor":	( id="" )->				# blimpObj
  						return @
  					"br":		->						# blimpObj
  						return @
  					"clear":	->						# blimpObj
  						return @
  					"disappear":->						# void
  						return undefined
  				}
  			
  			_scopeID = n
  			_curSurface = 0
  			_curBlimp = 0
  			_curSurfaceObj = _makeSurface(_curSurface)
  			_curBlimpObj = _makeBlimp(_curBlimp)
  			
  			return {
  				"focus":	 ->							# scopeObj
  					return @
  				"surface":	 ( n, callback=(scopeObj)-> )->	# scopeObj
  					return @
  				"blimp":	 ( n, callback=(scopeObj)-> )->	# scopeObj
  					return @
  				"disappear": ->							# void
  					return undefined
  			}
  		
  		{
  			json: _json
  			callback: _callback
  		} = opt
  		
  		_namedId = namedAry.length-1
  		_curScope = 0
  		_scopeAry = [new _makeScope]
  		_scriptTidAry = []
  		_eventHandlerHash = {}
  		_isTalking = false
  		_namedDiv
  		preload
  		
  		return {
  			"scope":		( n )->							# scopeObj
  				return _scopeAry[n]
  			"playScript":	( script="", callback=(namedObj)-> )->	# namedObj
  				return @
  			"breakScript":	->								# namedObj
  				return @
  			"raiseEvent":	( e )->							# namedObj
  				return @
  			"on":			( id="", handler=(e)-> )->		# namedObj
  				return @
  			"materialize":	->								# namedObj
  				return @
  			"vanish":		->								# void
  				return undefined
  		}
  	
  	return {
  		"createNamed": ( json={}, opt={}, callback=(namedObj)-> )->	# namedObj
  			opt.json = json
  			opt.callback = callback
  			return _namedAry[_namedAry.length] = _makeNamed(opt)
  		"named": ( n )->	# namedObj
  			return _namedAry[n]
  	}
   */
})();
