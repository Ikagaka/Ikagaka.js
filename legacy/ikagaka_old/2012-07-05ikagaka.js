// Generated by CoffeeScript 1.7.1
var hash2Array, ikagaka, json,
  __slice = [].slice;

json = {
  "shell": {
    "master": {
      "surface": {
        "0": {
          "element": [["base", "./ku-/shell/master/surface0.png"]],
          "collision": [[71, 40, 168, 98, "head"], [97, 112, 164, 158, "face"], [122, 216, 150, 259, "bust"]],
          "animation": [
            {
              "timing": "sometimes",
              "pattern": [["overlayfast", 100, 5], ["overlayfast", 101, 5], ["overlayfast", 100, 15], ["overlay", 0, 0]]
            }, {
              "timing": "always",
              "pattern": [["overlay", 203, 0, 82, 6], ["overlay", 203, 15, 82, 7], ["overlay", 203, 15, 82, 8], ["overlay", 203, 30, 82, 9], ["overlay", 203, 15, 82, 8], ["overlay", 203, 15, 82, 7], ["overlay", 203, 15, 82, 6], ["overlay", 203, 15, 82, 5], ["overlay", 203, 30, 82, 4], ["overlay", 203, 15, 82, 5], ["overlay", 203, 15, 82, 6]]
            }
          ]
        },
        "10": {
          "element": [["base", "./ku-/shell/master/surface10.png"]],
          "collision": [[67, 28, 164, 71, "head"], [85, 89, 141, 126, "face"], [88, 176, 126, 198, "bust"]],
          "animation": [
            {
              "timing": "sometimes",
              "pattern": [["overlayfast", 10, 5], ["overlayfast", 11, 5], ["overlayfast", 10, 15], ["overlay", -1, 10]]
            }, {
              "timing": "always",
              "pattern": [["overlay", 19, 15, 0, 0], ["overlay", 19, 15, 0, -1], ["overlay", 19, 15, 0, -2], ["overlay", 19, 30, 0, -1], ["overlay", 19, 15, 0, 0], ["overlay", 19, 15, 0, 1], ["overlay", 19, 30, 0, 2], ["overlay", 19, 15, 0, 3], ["overlay", 19, 15, 0, 2], ["overlay", 19, 15, 0, 1], ["overlay", 19, 30, 0, 0]]
            }
          ]
        },
        "11": {
          "element": [["base", "./ku-/shell/master/surface11.png"]]
        },
        "19": {
          "element": [["base", "./ku-/shell/master/surface19.png"]]
        },
        "100": {
          "element": [["base", "./ku-/shell/master/surface100.png"]]
        },
        "101": {
          "element": [["base", "./ku-/shell/master/surface101.png"]]
        },
        "203": {
          "element": [["base", "./ku-/shell/master/surface203.png"]]
        }
      }
    }
  }
};

hash2Array = function(hash) {
  var ary, k, v, _fn;
  ary = [];
  _fn = function() {
    return ary[k] = v;
  };
  for (k in hash) {
    v = hash[k];
    _fn(k, v);
  }
  return ary;
};

json.shell.master.surface = hash2Array(json.shell.master.surface);

ikagaka = (function() {
  var always, canvanizeElements, composeCanvanizeElements, composeElements, copy, drawSurface, isArray, isCanvas, isFunction, isImage, isNumber, isObject, isUndefined, loadImg, loadImgsToCnvs, makeNamed, namedAry, overlay, overlayfast, playingScript, random, rarely, runonce, setNamedDiv, setScopeDiv, sometimes, transImg, typeIs;
  isFunction = function(fn) {
    return Object.prototype.toString.apply(fn) === "[object Function]";
  };
  isArray = function(ary) {
    return Object.prototype.toString.apply(ary) === "[object Array]";
  };
  isObject = function(obj) {
    return Object.prototype.toString.apply(obj) === "[object Object]";
  };
  isImage = function(img) {
    return Object.prototype.toString.apply(img) === "[object HTMLImageElement]";
  };
  isCanvas = function(cnv) {
    return Object.prototype.toString.apply(cnv) === "[object HTMLCanvasElement]";
  };
  typeIs = function(unknown) {
    return Object.prototype.toString.apply(unknown);
  };
  isUndefined = function(undf) {
    return typeof undf === "undefined";
  };
  isNumber = function(num) {
    return isFinite(Number(num));
  };
  loadImg = function(url, callback) {
    var img;
    if (callback == null) {
      callback = function(img) {};
    }
    if (url === "") {
      setTimeout(function() {
        return callback(new Image);
      });
    } else {
      img = new Image;
      img.src = url;
      img.onload = function() {
        return callback(img);
      };
      img.onerror = function() {
        return callback(new Image);
      };
    }
  };
  copy = function(cnv) {
    var child, ctx;
    child = document.createElement("canvas");
    child.width = cnv.width;
    child.height = cnv.height;
    ctx = child.getContext("2d");
    try {
      ctx.drawImage(cnv, 0, 0);
    } catch (_error) {}
    return child;
  };
  transImg = function(img, callback) {
    var b, cnv, ctx, e, g, i, imgdata, r, _ref;
    if (callback == null) {
      callback = function(cnv) {};
    }
    cnv = copy(img);
    ctx = cnv.getContext("2d");
    try {
      imgdata = ctx.getImageData(0, 0, img.width, img.height);
      if (imgdata.data[3] === 0) {
        ctx.putImageData(imgdata, 0, 0);
        setTimeout(function() {
          return callback(cnv);
        });
      } else {
        i = 0;
        _ref = [imgdata.data[0], imgdata.data[1], imgdata.data[2]], r = _ref[0], g = _ref[1], b = _ref[2];
        while (i < imgdata.data.length) {
          if (r === imgdata.data[i] && g === imgdata.data[i + 1] && b === imgdata.data[i + 2]) {
            imgdata.data[i + 3] = 0;
          }
          i += 4;
        }
        ctx.putImageData(imgdata, 0, 0);
        setTimeout(function() {
          return callback(cnv);
        });
      }
    } catch (_error) {
      e = _error;
      setTimeout(function() {
        return callback(cnv);
      });
    }
  };
  loadImgsToCnvs = (function() {
    var canvasCache;
    canvasCache = {};
    return function(urlAry, callback) {
      var i, next;
      if (callback == null) {
        callback = function(cnvAry) {};
      }
      i = urlAry.length;
      urlAry.forEach(function(url) {
        if (canvasCache[url] != null) {
          return setTimeout(function() {
            return next(url);
          });
        } else {
          return loadImg(url, function(img) {
            return transImg(img, function(cnv) {
              canvasCache[url] = cnv;
              return setTimeout(function() {
                return next(url);
              });
            });
          });
        }
      });
      next = function(url) {
        if (--i === 0) {
          return callback(urlAry.map(function(url) {
            return copy(canvasCache[url]);
          }));
        }
      };
    };
  })();
  overlay = function(target, cnv, x, y) {
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    return overlayfast(target, cnv, x, y);
  };
  overlayfast = function(target, cnv, x, y) {
    var ctx;
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    ctx = target.getContext("2d");
    try {
      ctx.drawImage(cnv, x, y);
    } catch (_error) {}
    return target;
  };
  canvanizeElements = function(elmAry, callback) {
    var urlAry;
    if (callback == null) {
      callback = function(cnvedElmAry) {};
    }
    urlAry = elmAry.map(function(_arg) {
      var type, url, x, y;
      type = _arg[0], url = _arg[1], x = _arg[2], y = _arg[3];
      return url;
    });
    loadImgsToCnvs(urlAry, function(cnvAry) {
      return callback(elmAry.map(function(_arg, i) {
        var type, url, x, y;
        type = _arg[0], url = _arg[1], x = _arg[2], y = _arg[3];
        return [type, cnvAry[i], x, y];
      }));
    });
  };
  composeCanvanizeElements = function(cnvedElmAry) {
    var target;
    target = null;
    cnvedElmAry.forEach(function(_arg) {
      var cnv, type, x, y;
      type = _arg[0], cnv = _arg[1], x = _arg[2], y = _arg[3];
      if (target == null) {
        target = copy(cnv);
      }
      return target = (function() {
        switch (type) {
          case "base":
            return copy(cnv);
          case "overlay":
            return overlay(target, cnv, x, y);
          case "overlayfast":
            return overlayfast(target, cnv, x, y);
        }
      })();
    });
    return target;
  };
  composeElements = function(elmAry, callback) {
    if (callback == null) {
      callback = function(cnv) {};
    }
    return canvanizeElements(elmAry, function(cnvedElmAry) {
      return callback(composeCanvanizeElements(cnvedElmAry));
    });
  };
  drawSurface = function(target, cnv) {
    var ctx;
    target.width = cnv.width;
    target.height = cnv.height;
    target.parentNode.style.width = cnv.width;
    target.parentNode.style.height = cnv.height;
    ctx = target.getContext("2d");
    try {
      ctx.drawImage(cnv, 0, 0);
    } catch (_error) {}
    return target;
  };
  sometimes = function(tidAry, callback) {
    random(tidAry, callback, 2);
  };
  rarely = function(tidAry, callback) {
    random(tidAry, callback, 4);
  };
  random = function(tidAry, callback, n) {
    var ms;
    ms = 1;
    while (Math.round(Math.random() * 1000) > 1000 / n) {
      ms++;
    }
    tidAry.push(setTimeout((function() {
      return callback(function() {
        return random(tidAry, callback, n);
      });
    }), ms * 1000));
  };
  runonce = function(tidAry, callback) {
    tidAry.push(setTimeout(callback));
  };
  always = function(tidAry, callback) {
    tidAry.push(setTimeout(function() {
      return callback(function() {
        return always(tidAry, callback);
      });
    }));
  };
  setScopeDiv = function(target, n) {
    var blimpCanvas, blimpDiv, blimpTxt, scopeDiv, surfaceCanvas;
    scopeDiv = document.createElement("div");
    scopeDiv.setAttribute("class", "scope" + n);
    scopeDiv.style.bottom = "0px";
    scopeDiv.style.right = n * 240 + "px";
    surfaceCanvas = document.createElement("canvas");
    surfaceCanvas.setAttribute("class", "surface");
    surfaceCanvas.width = 0;
    surfaceCanvas.height = 0;
    blimpDiv = document.createElement("div");
    blimpDiv.setAttribute("class", "blimp");
    blimpDiv.style.top = "60px";
    blimpDiv.style.left = "-300px";
    blimpCanvas = document.createElement("canvas");
    blimpCanvas.width = 0;
    blimpCanvas.height = 0;
    blimpTxt = document.createElement("div");
    blimpTxt.style.margin = "10px";
    blimpTxt.style.marginRight = "30px";
    blimpTxt.style.overflowY = "scroll";
    blimpTxt.style.whiteSpace = "pre";
    blimpTxt.style.whiteSpace = "pre-wrap";
    blimpTxt.style.whiteSpace = "pre-line";
    blimpTxt.style.wordWrap = "break-word";
    scopeDiv.appendChild(surfaceCanvas);
    scopeDiv.appendChild(blimpDiv);
    blimpDiv.appendChild(blimpCanvas);
    blimpDiv.appendChild(blimpTxt);
    target.appendChild(scopeDiv);
    return scopeDiv;
  };
  setNamedDiv = function(target, id) {
    var namedDiv, namedStyle;
    namedDiv = document.createElement("div");
    namedDiv.setAttribute("id", "named" + id);
    namedDiv.setAttribute("class", "named");
    namedStyle = document.createElement("style");
    namedStyle.setAttribute("scoped", "scoped");
    namedStyle.innerHTML = "#named" + id + " *{\n	position: absolute;\n	border:   none;\n	margin:   0px;\n	padding:  0px;\n	-webkit-user-select:         none;\n	-webkit-tap-highlight-color: transparent;\n}\n.anchor,\n.select{\n	color:  red;\n	cursor: pointer;\n}\n.anchor:hover,\n.select:hover{\n	background-color: violet;\n}";
    namedDiv.appendChild(namedStyle);
    target.appendChild(namedDiv);
    return namedDiv;
  };
  playingScript = (function() {
    var regExpHash;
    regExpHash = {
      yy: /^\\\\/,
      y0: /^\\0/,
      y1: /^\\1/,
      yp: /^\\p\[(\d+)\]/,
      ys: /^\\s\[([^\]]+)\]/,
      yb: /^\\b\[([^\]]+)\]/,
      yi: /^\\i\[(\d+)\]/,
      ywN: /^\\w(\d+)/,
      y_w: /^\\_w\[(\d+)\]/,
      yq: /^\\q\[([^\]]+)\]/,
      y_aS: /^\\_a\[([^\]]+)\]/,
      y_aE: /^\\_a/,
      yc: /^\\c/,
      yn: /^\\n/,
      ynhalf: /^\\n\[half\]/,
      ye: /^\\e/
    };
    return function(script, tidAry, namedObj, callback) {
      var talkWait;
      if (callback == null) {
        callback = function() {};
      }
      talkWait = 0;
    };
  })();
  makeNamed = function(namedId, opt) {
    var body, callback, curScopeObj, curShellName, eventHandlerHash, getSurfaceCanvas, isTalking, makeScope, namedDiv, namedObj, onSecondChangeTid, scopeAry, scriptTidAry, surfaceCache;
    makeScope = function(scopeId) {
      var blimpCanvas, blimpDiv, blimpTxt, curBlimpObj, curSurfaceObj, makeBlimp, makeSurface, scopeDiv, scopeObj, surfaceCanvas;
      makeSurface = function(surfaceId, callback) {
        var baseSurfaceCache, patternCanvedElmAry, playPatternTidAryAry, playTimngTidAry, surfaceAry, surfaceJson, surfaceObj;
        if (callback == null) {
          callback = function(surfaceObj) {};
        }
        console.log("makeSurface(" + surfaceId + ",callback)");
        playTimngTidAry = [];
        playPatternTidAryAry = [];
        patternCanvedElmAry = [];
        surfaceAry = json.shell[curShellName].surface;
        surfaceJson = json.shell[curShellName].surface[surfaceId];
        baseSurfaceCache = null;
        getSurfaceCanvas(surfaceId, function(cnv) {
          var regExp, _ref;
          baseSurfaceCache = copy(drawSurface(surfaceCanvas, cnv));
          patternCanvedElmAry = [["base", copy(baseSurfaceCache), 0, 0]];
          regExp = /(\w+)(?:,\s*(\d+))?/;
          if ((_ref = surfaceJson.animation) != null) {
            _ref.forEach(function(anmN, i) {
              var n, timing, _ref1;
              playPatternTidAryAry[i] = [];
              _ref1 = regExp.exec(anmN.timing).slice(1), timing = _ref1[0], n = _ref1[1];
              switch (timing) {
                case "sometimes":
                  return sometimes(playTimngTidAry, function(repeat) {
                    return surfaceObj.playAnimation(i, repeat);
                  });
                case "rarely":
                  return rarely(playTimngTidAry, function(repeat) {
                    return surfaceObj.playAnimation(i, repeat);
                  });
                case "random":
                  return random(playTimngTidAry, (function(repeat) {
                    return surfaceObj.playAnimation(i, repeat);
                  }), n);
                case "runonce":
                  return runonce(playTimngTidAry, function(repeat) {
                    return surfaceObj.playAnimation(i, repeat);
                  });
                case "always":
                  return always(playTimngTidAry, function(repeat) {
                    return surfaceObj.playAnimation(i, repeat);
                  });
              }
            });
          }
          return setTimeout(function() {
            return callback(surfaceObj);
          });
        });
        surfaceObj = {
          "playAnimation": function(animationId, callback) {
            var i, patternAry, playPattern, _ref;
            if (callback == null) {
              callback = function(surfaceObj) {};
            }
            console.log("named(" + namedId + ").scope(" + scopeId + ").surface(" + surfaceId + ").playAnimation(" + animationId + ",callback)");
            console.log(playTimngTidAry);
            console.log(playPatternTidAryAry);
            if (((_ref = surfaceJson.animation[animationId]) != null ? _ref.pattern : void 0) != null) {
              patternAry = surfaceJson.animation[animationId].pattern;
              i = 0;
              playPattern = function() {
                var delay, id, type, x, y, _ref1;
                _ref1 = patternAry[i], type = _ref1[0], id = _ref1[1], delay = _ref1[2], x = _ref1[3], y = _ref1[4];
                if (id === -1) {
                  patternCanvedElmAry[animationId + 1] = [];
                  setTimeout(function() {
                    return drawSurface(surfaceCanvas, composeCanvanizeElements(patternCanvedElmAry));
                  });
                } else if (surfaceAry[id] != null) {
                  getSurfaceCanvas(id, function(cnv) {
                    patternCanvedElmAry[animationId + 1] = [type, cnv, x, y];
                    return drawSurface(surfaceCanvas, composeCanvanizeElements(patternCanvedElmAry));
                  });
                }
                i += 1;
                if (patternAry[i] != null) {
                  return playPatternTidAryAry[animationId].push(setTimeout(playPattern, delay * 10));
                } else {
                  return setTimeout(function() {
                    return callback(surfaceObj);
                  });
                }
              };
              setTimeout(playPattern);
            } else {
              setTimeout(function() {
                return callback(surfaceObj);
              });
            }
            return surfaceObj;
          },
          "stopAnimation": function(animationId) {
            console.log("named(" + namedId + ").scope(" + scopeId + ").surface(" + surfaceId + ").stopAnimation(" + animationId + ")");
            if (animationId != null) {
              clearTimeout(playTimngTidAry[animationId]);
              playPatternTidAryAry[animationId].forEach(function(tid) {
                return clearTimeout(tid);
              });
              playPatternTidAryAry[animationId] = [];
            } else {
              playTimngTidAry.forEach(function(tid) {
                return clearTimeout(tid);
              });
              playTimngTidAry = [];
              playPatternTidAryAry.forEach(function(tidAry) {
                return tidAry.forEach(function(tid) {
                  return clearTimeout(tid);
                });
              });
              playPatternTidAryAry = [];
            }
            return surfaceObj;
          },
          "show": function() {
            console.log("named(" + namedId + ").scope(" + scopeId + ").surface(" + surfaceId + ").show()");
            surfaceCanvas.style.visivilty = "visible";
            return surfaceObj;
          },
          "hide": function() {
            console.log("named(" + namedId + ").scope(" + scopeId + ").surface(" + surfaceId + ").hide()");
            surfaceCanvas.style.visivilty = "hidden";
            return surfaceObj;
          },
          "unload": function() {
            console.log("named(" + namedId + ").scope(" + scopeId + ").surface(" + surfaceId + ").unload()");
            this.stopAnimation();
            surfaceCanvas.width = 0;
            surfaceCanvas.height = 0;
          }
        };
        return surfaceObj;
      };
      makeBlimp = function(blimpId, callback) {
        var blimpObj;
        if (callback == null) {
          callback = function(blimpObj) {};
        }
        console.log("makeBlimp(" + blimpId + ",callback)");
        blimpObj = {
          "show": function() {
            return blimpObj;
          },
          "hide": function() {
            return blimpObj;
          },
          "talk": function(chr) {
            if (chr == null) {
              chr = "";
            }
            return blimpObj;
          },
          "selection": function(title, id) {
            if (title == null) {
              title = "";
            }
            if (id == null) {
              id = "";
            }
            return blimpObj;
          },
          "anchor": function(id) {
            if (id == null) {
              id = "";
            }
            return blimpObj;
          },
          "br": function() {
            return blimpObj;
          },
          "clear": function() {
            return blimpObj;
          },
          "unload": function() {}
        };
        return blimpObj;
      };
      console.log("makeScope(" + scopeId + ")");
      scopeDiv = setScopeDiv(namedDiv, scopeId);
      surfaceCanvas = scopeDiv.childNodes[0];
      blimpDiv = scopeDiv.childNodes[1];
      blimpCanvas = blimpDiv.childNodes[0];
      blimpTxt = blimpDiv.childNodes[1];
      curSurfaceObj = makeSurface(0, function() {
        return curSurfaceObj.hide();
      });
      curBlimpObj = makeBlimp(0, function() {
        return curBlimpObj.hide();
      });
      scopeObj = {
        "focus": function() {
          namedDiv.appendChild(scopeDiv);
          return scopeObj;
        },
        "surface": function(surfaceId, callback) {
          if (callback == null) {
            callback = function(surfaceObj) {};
          }
          console.log("named(" + namedId + ").scope(" + scopeId + ").surface(" + surfaceId + ")");
          if (surfaceId === -1) {
            curSurfaceObj.hide();
            setTimeout(function() {
              return callback(curSurfaceObj);
            });
          } else if (json.shell[curShellName].surface[surfaceId] != null) {
            curSurfaceObj.unload();
            curSurfaceObj = makeSurface(surfaceId, function(curSurfaceObj) {
              curSurfaceObj.show();
              return setTimeout(function() {
                return callback(curSurfaceObj);
              });
            });
          }
          return curSurfaceObj;
        },
        "blimp": function(blimpId, callback) {
          if (callback == null) {
            callback = function(scopeObj) {};
          }
          console.log("named(" + namedId + ").scope(" + scopeId + ").blimp(" + blimpId + ")");
          return curBlimpObj;
        },
        "disappear": function() {
          console.log("named(" + namedId + ").scope(" + scopeId + ").disappear()");
          curSurfaceObj.unload();
          curBlimpObj.unload();
          namedDiv.removeChild(scopeDiv);
          scopeAry[scopeId] = void 0;
        }
      };
      return scopeObj;
    };
    console.log("makeNamed(" + namedId + "," + opt + ")");
    surfaceCache = [];
    getSurfaceCanvas = function(surfaceId, callback) {
      var surfaceJson;
      if (callback == null) {
        callback = function(cnv) {};
      }
      surfaceJson = json.shell[curShellName].surface[surfaceId];
      if (surfaceCache[surfaceId] != null) {
        return setTimeout(function() {
          return callback(copy(surfaceCache[surfaceId]));
        });
      } else if ((surfaceJson != null ? surfaceJson.element : void 0) != null) {
        return composeElements(surfaceJson.element, function(cnv) {
          surfaceCache[surfaceId] = cnv;
          return callback(copy(cnv));
        });
      } else {
        return setTimeout(callback(document.createElement("canvas")));
      }
    };
    json = opt.json, callback = opt.callback;
    body = document.getElementsByTagName("body")[0];
    namedDiv = setNamedDiv(body, namedId);
    curShellName = "master";
    scriptTidAry = [];
    onSecondChangeTid = 0;
    eventHandlerHash = {};
    isTalking = false;
    curScopeObj = makeScope(0);
    scopeAry = [curScopeObj];
    json.shell[curShellName].surface.forEach(function(surfaceJson, i) {
      return composeElements(surfaceJson.element, function(cnv) {
        return surfaceCache[i] = cnv;
      });
    });
    setTimeout(function() {
      return callback(namedObj);
    });
    namedObj = {
      "scope": function(scopeId) {
        console.log("named(" + namedId + ").scope(" + scopeId + ")");
        if (!isNumber(scopeId)) {
          return curScopeObj;
        } else if (scopeAry[scopeId] != null) {
          return curScopeObj = scopeAry[scopeId];
        } else {
          curScopeObj = makeScope(scopeId);
          scopeAry[scopeId] = curScopeObj;
          return curScopeObj;
        }
      },
      "playScript": function(script, callback) {
        if (script == null) {
          script = "";
        }
        if (callback == null) {
          callback = function(namedObj) {};
        }
        console.log("named(" + namedId + ").playScript(\"" + script + "\",callback)");
        this.breakScript();
        isTalking = true;
        playingScript.call(namedObj, script, scriptTidAry, (function(_this) {
          return function() {
            isTalking = false;
            callback(namedObj);
            return setTimeout(function() {
              return _this.breakScript();
            });
          };
        })(this));
        return namedObj;
      },
      "breakScript": function() {
        console.log("named(" + namedId + ").breakScript()");
        scriptTidAry.forEach(function(tid) {
          return clearTimeout(tid);
        });
        scriptTidAry = [];
        scopeAry.forEach(function(scopeObj) {
          return scopeObj.blimp().clear();
        });
        isTalking = false;
        return namedObj;
      },
      "raiseEvent": function(e) {
        var script;
        console.log("named(" + namedId + ").raiseEvent(" + e.ID + ")");
        script = "\\1\\s[10]\\0\\s[0]Hello World!\\e";
        if (script != null) {
          this.breakScript();
          setTimeout((function(_this) {
            return function() {
              return _this.playScript(script);
            };
          })(this));
        }
        return namedObj;
      },
      "on": function(id, handler) {
        if (id == null) {
          id = "";
        }
        if (handler == null) {
          handler = function(e) {};
        }
        console.log("named(" + namedId + ").on(\"" + id + "\")");
        eventHandlerHash[id] = handler;
        return namedObj;
      },
      "materialize": function() {
        console.log("named(" + namedId + ").materialize()");
        onSecondChangeTid = setInterval(((function(_this) {
          return function() {
            return _this.raiseEvent({
              "ID": "OnSecondChange",
              "Reference0": 0,
              "Reference1": 0,
              "Reference2": 0,
              "Reference3": 0
            });
          };
        })(this)), 1000);
        setTimeout((function(_this) {
          return function() {
            return _this.raiseEvent({
              "ID": "OnBoot",
              "Reference0": curShellName
            });
          };
        })(this));
        return namedObj;
      },
      "vanish": function() {
        console.log("named(" + namedId + ").vanish()");
        clearTimeout(onSecondChangeTid);
        this.breakScript();
        scopeAry.forEach(function(scopeObj) {
          return scopeObj.disappear();
        });
        body.removeChild(namedDiv);
        namedAry[namedId] = void 0;
      }
    };
    return namedObj;
  };
  namedAry = [];
  return {
    "createNamed": function() {
      var callback, json, opt, _i;
      json = arguments[0], opt = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), callback = arguments[_i++];
      if (json == null) {
        json = {};
      }
      if (callback == null) {
        callback = function(namedObj) {};
      }
      opt = opt[0] || {};
      opt.json = json;
      opt.callback = callback;
      namedAry[namedAry.length] = makeNamed(namedAry.length, opt);
      return namedAry[namedAry.length - 1];
    }
  };
})();

$(function() {
  var ku_;
  return ku_ = ikagaka.createNamed(json, function() {
    ku_.materialize();
    return ku_.scope(0).surface(10, function() {
      return ku_.scope(0).surface(10).stopAnimation();
    });
  });
});
