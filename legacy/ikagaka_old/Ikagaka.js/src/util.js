// Generated by CoffeeScript 1.7.1
window.util = (function() {
  var copy, deepcopy, init, overlayfast, regexec, transImg, whiteCanvas;
  init = function() {
    return {
      regexec: regexec,
      whiteCanvas: whiteCanvas,
      copy: copy,
      transImg: transImg,
      base: copy,
      overlay: overlayfast,
      overlayfast: overlayfast,
      replace: overlayfast,
      deepcopy: deepcopy
    };
  };
  deepcopy = function(original) {
    var copy, key, val;
    copy = {};
    for (key in original) {
      val = original[key];
      switch (mm.type(val)) {
        case "boolean":
          copy[key] = val;
          break;
        case "number":
          copy[key] = val;
          break;
        case "string":
          copy[key] = val;
          break;
        default:
          copy[key] = deepcopy(val);
      }
    }
    return copy;
  };
  regexec = function(reg, str, fn) {
    var ary, matches;
    ary = [];
    while (true) {
      matches = reg.exec(str);
      if (matches == null) {
        break;
      }
      ary.push(fn(matches));
    }
    return ary;
  };
  whiteCanvas = function() {
    var cnv;
    cnv = document.createElement("canvas");
    cnv.width = 0;
    cnv.height = 0;
    return cnv;
  };
  transImg = function(img) {
    var b, cnv, ctx, data, g, i, imgdata, r;
    cnv = copy(img);
    ctx = cnv.getContext("2d");
    imgdata = ctx.getImageData(0, 0, img.width, img.height);
    data = imgdata.data;
    i = 0;
    r = data[0];
    g = data[1];
    b = data[2];
    if (data[3] !== 0) {
      while (i < data.length) {
        if (r === data[i] && g === data[i + 1] && b === data[i + 2]) {
          data[i + 3] = 0;
        }
        i += 4;
      }
      ctx.putImageData(imgdata, 0, 0);
    }
    return cnv;
  };
  copy = function(parent) {
    var child, ctx;
    child = document.createElement("canvas");
    ctx = child.getContext("2d");
    child.width = parent.width;
    child.height = parent.height;
    ctx.drawImage(parent, 0, 0);
    return child;
  };
  overlayfast = function(target, canvas, x, y) {
    var ctx;
    ctx = target.getContext("2d");
    ctx.drawImage(canvas, x, y);
    return target;
  };
  return init();
})();
