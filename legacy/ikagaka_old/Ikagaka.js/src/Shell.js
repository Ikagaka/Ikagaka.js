// Generated by CoffeeScript 1.7.1
window.Shell = (function() {
  function Shell(nar) {
    this.nar = nar;
    this.surfaces = null;
    this.filelist = {};
    this.surfaceN = {};
    this.surfaceCache = {};
    this.currentShellName = "master";
  }

  Shell.prototype.load = (function() {
    var srfFileReg;
    srfFileReg = /surface(\d+)\.png/i;
    return function(currentShellName, callback) {
      var curShellDir, filename, n, val;
      this.currentShellName = currentShellName;
      if (this.nar.shell[this.currentShellName] == null) {
        return setTimeout(function() {
          return callback(false);
        });
      }
      curShellDir = this.nar.shell[this.currentShellName];
      for (filename in curShellDir) {
        val = curShellDir[filename];
        this.filelist[filename] = val;
        if (srfFileReg.test(filename)) {
          n = Number(srfFileReg.exec(filename)[1]);
          this.surfaceN[n] = val;
        }
      }
      return curShellDir["descript.txt"]((function(_this) {
        return function(text) {
          _this.descript = new Descript(text);
          return curShellDir["surfaces.txt"](function(text) {
            _this.surfaces = new Surfaces(text);
            return callback(_this);
          });
        };
      })(this));
    };
  })();

  Shell.prototype.getSurface = function(id, callback) {
    var n, srfdef;
    n = id;
    if (this.surfaceCache[n] != null) {
      return setTimeout((function(_this) {
        return function() {
          return callback(_this.surfaceCache[n]);
        };
      })(this));
    }
    if ((this.surfaces[n] == null) && (this.surfaceN[n] == null)) {
      return setTimeout(function() {
        return callback(false);
      });
    }
    if ((this.surfaces[n] == null) && (this.surfaceN[n] != null)) {
      return this.surfaceN[n](function(img) {
        var srfdef;
        srfdef = {
          collisions: null,
          elements: null,
          animations: null
        };
        srfdef.baseSurfaceCanvas = util.transImg(img);
        return callback(srfdef);
      });
    }
    srfdef = util.deepcopy(this.surfaces[n]);
    return this.surfaceN[n]((function(_this) {
      return function(img) {
        var elmingCnv, recursiveCall;
        if (img) {
          elmingCnv = util.transImg(img);
        } else {
          elmingCnv = util.whiteCanvas();
        }
        recursiveCall = function(i) {
          var elm, layer, src, x, y;
          elm = srfdef.elements[i++];
          if (elm == null) {
            srfdef.surfaceNumber = n;
            srfdef.baseSurfaceCanvas = elmingCnv;
            _this.surfaceCache[n] = srfdef;
            return callback(srfdef);
          }
          layer = elm.layer, src = elm.src, x = elm.x, y = elm.y;
          return _this.filelist[src](function(img) {
            if (elmingCnv.width * elmingCnv.height === 0) {
              layer = "base";
            }
            elmingCnv = (function() {
              switch (layer) {
                case "base":
                  return util.transImg(img);
                default:
                  return util.overlayfast(elmingCnv, util.transImg(img), x, y);
              }
            })();
            return recursiveCall(i);
          });
        };
        return recursiveCall(0);
      };
    })(this));
  };

  return Shell;

})();
