// Generated by CoffeeScript 1.7.1
window.Surfaces = (function() {
  var Animation, Animations, Collision, Collisions, Element, Elements, Pattern, Patterns, Surface, _class;

  function Surfaces() {
    return _class.apply(this, arguments);
  }

  _class = (function() {
    var range, regApnd, regComment, regDef, regOldIntvl, regOldPtn;
    range = (function() {
      var regHead;
      regHead = /(\!)?(\d+)(?:\-(\d+))?\,?/g;
      return function(head) {
        var aplys, rjcts;
        rjcts = [];
        aplys = [];
        util.regexec(regHead, head, function(_arg) {
          var a, b, nums, rjct, __, _i, _results;
          __ = _arg[0], rjct = _arg[1], a = _arg[2], b = _arg[3];
          a = Number(a);
          b = Number(b);
          nums = isFinite(b) ? (function() {
            _results = [];
            for (var _i = a; a <= b ? _i <= b : _i >= b; a <= b ? _i++ : _i--){ _results.push(_i); }
            return _results;
          }).apply(this) : [a];
          if (rjct != null) {
            return rjcts = rjcts.concat(nums);
          } else {
            return aplys = aplys.concat(nums);
          }
        });
        return _.difference(_.unique(aplys), _.unique(rjcts));
      };
    })();
    regDef = /([^\{\}]+)\{([^\{\}]+)\}/g;
    regOldIntvl = /(\d+)interval\s?\,\s?(.+)/g;
    regOldPtn = /(\d+)pattern(\d+)\s?\,\s?([\-|\+]?\d+)\s?\,\s?(\d+)\s?\,\s?([\w\d]+)(?:\s?\,\s?([\-|\+]?\d+)\s?\,\s?([\-|\+]?\d+))?/g;
    regComment = /\/\/.*/g;
    regApnd = /surface\.append/;
    return function(text) {
      this._defAry = [];
      this._apdAry = [];
      util.regexec(regComment, text, function(_arg) {
        var match;
        match = _arg[0];
        return text = text.replace(match, "");
      });
      util.regexec(regOldIntvl, text, function(_arg) {
        var animId, match, timing;
        match = _arg[0], animId = _arg[1], timing = _arg[2];
        return text = text.replace(match, ("animation" + animId) + ".interval," + ("" + timing));
      });
      util.regexec(regOldPtn, text, function(_arg) {
        var anmId, layer, match, ptnId, srfId, wait, x, y;
        match = _arg[0], anmId = _arg[1], ptnId = _arg[2], srfId = _arg[3], wait = _arg[4], layer = _arg[5], x = _arg[6], y = _arg[7];
        return text = text.replace(match, ("animation" + anmId) + (".pattern" + ptnId + ",") + ("" + layer + ",") + ("" + srfId + ",") + ("" + wait + ",") + ("" + (x || 0) + ",") + ("" + (y || 0)));
      });
      util.regexec(regDef, text, (function(_this) {
        return function(_arg) {
          var body, head, isApnd, n, nums, srf, __, _i, _j, _len, _len1, _results, _results1;
          __ = _arg[0], head = _arg[1], body = _arg[2];
          if (!/surface/.test(head)) {
            return;
          }
          isApnd = regApnd.test(head);
          srf = new Surface(body);
          head = head.replace(/surface/g, "");
          nums = range(head);
          if (isApnd) {
            _results = [];
            for (_i = 0, _len = nums.length; _i < _len; _i++) {
              n = nums[_i];
              _results.push(_this.append(n, srf));
            }
            return _results;
          } else {
            _results1 = [];
            for (_j = 0, _len1 = nums.length; _j < _len1; _j++) {
              n = nums[_j];
              _results1.push(_this.define(n, srf));
            }
            return _results1;
          }
        };
      })(this));
      return this.resolve();
    };
  })();

  Surfaces.prototype.define = function(n, srf) {
    return this._defAry[n] = srf;
  };

  Surfaces.prototype.append = function(n, srf) {
    this._apdAry[n] = this._apdAry[n] || new Surface;
    _.extend(this._apdAry[n].collisions, srf.collisions);
    _.extend(this._apdAry[n].elements, srf.elements);
    _.extend(this._apdAry[n].animations, srf.animations);
    return this;
  };

  Surfaces.prototype.resolve = function() {
    var n, srf, _ref;
    _.extend(this, this._defAry);
    _ref = this._apdAry;
    for (n in _ref) {
      srf = _ref[n];
      this[n] = this[n] || new Surface;
      _.extend(this[n].collisions, srf.collisions);
      _.extend(this[n].elements, srf.elements);
      _.extend(this[n].animations, srf.animations);
    }
    delete this._defAry;
    return delete this._apdAry;
  };

  Collision = (function() {
    function Collision(x, y, width, height, id) {
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
      this.id = id;
    }

    return Collision;

  })();

  Collisions = (function() {
    var reg;

    reg = /collision(\d+)\s?\,\s?([\-|\+]?\d+)\s?\,\s?([\-|\+]?\d+)\s?\,\s?([\-|\+]?\d+)\s?\,\s?([\-|\+]?\d+)\s?\,\s?([\w\d]+)/g;

    function Collisions(body) {
      if (body == null) {
        return this;
      }
      util.regexec(reg, body, (function(_this) {
        return function(_arg) {
          var ex, ey, id, n, sx, sy, __;
          __ = _arg[0], n = _arg[1], sx = _arg[2], sy = _arg[3], ex = _arg[4], ey = _arg[5], id = _arg[6];
          return _this[Number(n)] = new Collision(Number(sx), Number(sy), (Number(ex)) - (Number(sx)), (Number(ey)) - (Number(sy)), id);
        };
      })(this));
    }

    return Collisions;

  })();

  Element = (function() {
    function Element(layer, src, x, y) {
      this.layer = layer;
      this.src = src;
      this.x = x;
      this.y = y;
    }

    return Element;

  })();

  Elements = (function() {
    var reg;

    reg = /element(\d+)\s?\,\s?([\w\d\.]+)\s?\,\s?([\w\d\.]+)(?:\s?\,\s?([\-|\+]?\d+)\s?\,\s?([\-|\+]?\d+))?/g;

    function Elements(body) {
      if (body == null) {
        return this;
      }
      util.regexec(reg, body, (function(_this) {
        return function(_arg) {
          var layer, n, src, x, y, __;
          __ = _arg[0], n = _arg[1], layer = _arg[2], src = _arg[3], x = _arg[4], y = _arg[5];
          return _this[Number(n)] = new Element(layer, src, Number(x || 0), Number(y || 0));
        };
      })(this));
    }

    return Elements;

  })();

  Pattern = (function() {
    function Pattern(composeType, surfaceNumber, wait, maxWait, x, y) {
      this.composeType = composeType;
      this.surfaceNumber = surfaceNumber;
      this.wait = wait;
      this.maxWait = maxWait;
      this.x = x;
      this.y = y;
      if (!isFinite(this.maxWait)) {
        delete this.maxWait;
      }
    }

    return Pattern;

  })();

  Patterns = (function() {
    var ptnReg;

    ptnReg = /pattern(\d+)\s?\,\s?([\w\d]+)\s?\,\s?([\-|\+]?\d+)\s?\,\s?(\d+)(?:\-(\d+))?(?:\s?\,\s?([\-|\+]?\d+)\s?\,\s?([\-|\+]?\d+))?/g;

    function Patterns(body) {
      util.regexec(ptnReg, body, (function(_this) {
        return function(_arg) {
          var layer, maxWait, minWait, n, num, x, y, __;
          __ = _arg[0], n = _arg[1], layer = _arg[2], num = _arg[3], minWait = _arg[4], maxWait = _arg[5], x = _arg[6], y = _arg[7];
          return _this[Number(n)] = new Pattern(layer, Number(num), Number(minWait), Number(maxWait), Number(x || 0), Number(y || 0));
        };
      })(this));
    }

    return Patterns;

  })();

  Animation = (function() {
    var intReg;

    intReg = /interval\s?\,\s?(.+)/;

    function Animation(body) {
      if (intReg.test(body)) {
        this.interval = (intReg.exec(body))[1];
        this.patterns = new Patterns(body);
      }
    }

    return Animation;

  })();

  Animations = (function() {
    var reg;

    reg = /animation(\d+)\.([^\r\n]+)/g;

    function Animations(body) {
      var anmN, n;
      if (body == null) {
        return this;
      }
      anmN = {};
      util.regexec(reg, body, function(_arg) {
        var n, str, __;
        __ = _arg[0], n = _arg[1], str = _arg[2];
        n = Number(n);
        return anmN[n] = (anmN[n] || "") + "\r\n" + str;
      });
      for (n in anmN) {
        body = anmN[n];
        this[n] = new Animation(body);
      }
    }

    return Animations;

  })();

  Surface = (function() {
    function Surface(body) {
      this.collisions = new Collisions(body);
      this.elements = new Elements(body);
      this.animations = new Animations(body);
    }

    return Surface;

  })();

  return Surfaces;

})();
