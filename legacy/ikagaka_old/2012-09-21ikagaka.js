// Generated by CoffeeScript 1.7.1
var Ikagaka;

Ikagaka = (function() {
  function Ikagaka() {}

  Ikagaka.prototype.load = function(callback) {};

  Ikagaka.prototype.unload = function() {};

  return Ikagaka;

})();

Ikagaka.Named = (function() {
  function Named() {}

  Named.prototype.load = function(callback) {};

  Named.prototype.unload = function() {};

  Named.prototype.raiseEvent = function(e) {};

  Named.prototype.on = function(id, handler) {};

  Named.prototype.playScript = function(script, callback) {};

  Named.prototype.stopScript = function() {};

  Named.prototype.command = function(tag, callback) {
    if (Y0.test(tag)) {

    }
    if (Y1.test(tag)) {

    }
    if (Yp.test(tag)) {

    } else {
      return console.error(tag + " is illegal tag.");
    }
  };

  return Named;

})();

Ikagaka.Scope = (function() {
  function Scope() {}

  Scope.prototype.load = function(callback) {};

  Scope.prototype.unload = function() {};

  Scope.prototype.command = function(tag, callback) {};

  return Scope;

})();

Ikagaka.Shell = (function() {
  function Shell() {}

  Shell.prototype.load = function(callback) {};

  Shell.prototype.unload = function() {};

  Shell.prototype.tags = [];

  Shell.prototype.command = function(tag, callback) {};

  return Shell;

})();

Ikagaka.Balloon = (function() {
  function Balloon() {}

  Balloon.prototype.load = function(callback) {};

  Balloon.prototype.unload = function() {};

  Balloon.prototype.command = function(tag, callback) {};

  return Balloon;

})();

Ikagaka.Ghost = (function() {
  function Ghost() {}

  Ghost.prototype.load = function(callback) {};

  Ghost.prototype.unload = function() {};

  Ghost.prototype.command = function(tag, callback) {};

  Ghost.prototype.getResponce = function(request, callback) {};

  return Ghost;

})();
